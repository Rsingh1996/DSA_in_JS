Graph 
- A graph is a non-linear data structure that consists of a finite number of vertices(also called nodes) connected by edges.
- Trees are specific type of graph data structure.

Type of Graph
- Directed : A graph in which the edges have direction.
Edges are usually represnted by arrows pointing in the direction the graph can be traversed.
A---->B---->C
- Undirected : A graph in which the edges are bidirectional.
The graph can be traversed in either direction.
The absence of an arrow tells us that the graph is undirected.
A----B----C
C----B----A

Usage -
Google maps 
Social media sites(FB, Insta)

Represntation -
1. Adjacency matrix 
- An adjacency matrix is a 2D array of size V x V where V is the number of vertices in the graph.
- Each row and column represnt a vertex
- If the value of any element say, matrix[i][j] is 1, it represnts that there is an edge connecting vertex i and vertex j.
A----B----C
  A    B    C
 ------------
A|0    1    0
B|1    0    1
C|0    1    0

2. Adjacency list
- Vertices are stored in a map like data structure, and every vertex stores a list of its adjacent vertices.
A----B-----c
A--->B
B--->A,C 
C--->B

Adjacency matrix vs Adjacency list
With an adjacency list, we only need to store the values for the edges that exist.
With adjacency matrix, we store values irrespective of whether an edge exists or not.
Because of this, storage wise an adjacency list is way more efficient.

With adjacency list, inserting and finding adjacent nodes is constant time complexity whereas with adjacency matrix, it is linear time complexity.

An adjacency list allows us to store additional values with an edge such as weight of the edges. 
With adjacency matrix, such information would have to be stored externally.

