/*
Tree -
A tree is a hierachical data structure that consists of nodes connected by edges.
A trre is a non-linear data structure, compared to arrays, linked list, stacks and queue which are linear data structure.
In linear data structure, the time required to search is propotional to the size of the data set.
Trees however, owing to the nonlinear nature allow quicker and easier access to the data.
A tree will not contain any loops or cycles.

Usage -
File system for directory structure
A family tree
An Organisation tree
DOM
Chat bots
Abstracted syntax tree

Tree Terminology
1. Node
A basic unit of a tree. It contains data and links (edges) to other nodes.

2. Root Node
The topmost node in the tree. It has no parent.

Example: In a file system, the main directory (like C:/ or /) is the root.

3. Parent Node
A parent node is a node that has one or more child nodes or A parent node is the immediate predecessor of a child node.

4. Child Node
A node that is directly connected and below another node (its parent).

5. Sibling Nodes
Nodes that share the same parent.

6. Leaf Node
A node that has no children.

7. Internal Node
Any node that is not a leaf, i.e., it has at least one child.

8. Ancestor Node
Any node on the path from the root to a given node, including the root and parent.

9. Descendant Node
Any node that lies below a given node (children, grandchildren, etc.).

10. Subtree
A portion of a tree starting at a given node (includes the node and all its descendants).

11. Depth
The number of edges from the root to the node.

12. Height
The number of edges on the longest path from the node to a leaf.

13. Path:
A sequence of connected nodes.
➤ Example: A → B → C

14. Distance:
The number of edges between two nodes.
➤ Example: A to C = 2 edges

15. Degree:
The number of children a node has.
➤ Example: A node with 2 children → degree = 2

Binary Tree
A binary tree is a tree data structure in which each node has at most two children.
They are reffered to as left child and right child.

Binary Search Tree - which has following two properties
1. The value of each left node must be smaller then the parent node.
2. The value of each right node must be greater than the parent node.
Each node has at most two children.

Operation -
Insertion - To add a node to the tree
Search - To find a node given its value
Deletion - To remove a node given its value
Tree Traversal - Visiting every node in the tree.
DFS & BFS - To visit all nodes in the tree

DFS - The DFS algorithm starts at the root node and explores as far as possible along each branch before backtracking.
Visit the root node, visit all the nodes in the left subtree and visit all the nodes in the right subtree.
Depending on the order in which we do this, there can be three types of DFS traversals.
a. Preorder
b. Inorder
c. Postorder

a. Preorder Traversal -
1. Read the data of the node
2. Visit the left subtree
3. Visit the right subtree

b. Inorder Traversal -
1. Visit the left subtree
2. Read the data of the node 
3. Visit the right subtree

c. Inorder Traversal -
1. Visit the left subtree
2. Visit the right subtree
3. Read the data of the node 

BFS - Explore all nodes at the present depth prior to moving on to the nodes at the next depth level.
BFS Traversal Approach
1. create a queue
2. Enqueue the root node
3. As long as a node exists in the queue
  a. Dequeue the node from the front
  b. Read the node's value
  c. Enqueue the node's left child if the exits 
  d. Enqueue the node's right child if it exits 

Usage - 
Searching 
Sorting 
To implement abstract data types such as lookup tables and priority queues.

*/
